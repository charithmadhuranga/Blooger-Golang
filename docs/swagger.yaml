basePath: /
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Post:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: Simple blogging platform API with Fiber, GORM, and SQLite.
  title: GoFiber Blogger API
  version: "1.0"
paths:
  /api/posts:
    get:
      description: Retrieve all blog posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new blog post
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create post
      tags:
      - posts
  /api/posts/{id}:
    delete:
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete post
      tags:
      - posts
    get:
      description: Retrieve a single post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get single post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update post
      tags:
      - posts
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
